proxy_cache_path /etc/nginx/cache levels=1:2 keys_zone=prerendercloud_cache:10m max_size=100m inactive=60m use_temp_path=off;

server {
  server_name namebazaar.io;
  return 301 https://$host$request_uri;
}

server {

  # must use resolver and $variable to fix nginx inability to respect TTL of prerender.cloud's load balancer
  resolver 8.8.8.8;
  set $prerendercloud 'service.prerender.cloud';

  listen 443 spdy;
  server_name namebazaar.io;

  spdy_headers_comp 1;

  ssl on;
  ssl_certificate /etc/letsencrypt/live/namebazaar.io/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/namebazaar.io/privkey.pem;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_dhparam /etc/ssl/certs/dhparam.pem;
  ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  ssl_stapling on;
  ssl_stapling_verify on;
  add_header Strict-Transport-Security max-age=15768000;

  location ~ /(contracts|images|js|css|fonts)(.*)$ {
    rewrite /(contracts|images|js|css|fonts)(.*) /ipns/QmasSYC5JsZT9X52yQhzexdQxbKtcc9VwQW35L3yXCNfRV/$1$2 break;
    try_files $uri @prerendercloud;
  }

  location / {
    rewrite /(.*) /ipns/QmasSYC5JsZT9X52yQhzexdQxbKtcc9VwQW35L3yXCNfRV/ break;
    try_files $uri @prerendercloud;
  }

  location @prerendercloud {
    proxy_pass http://127.0.0.1:8080; 

    # gzip all traffic to service.prerender.cloud
    proxy_set_header Accept-Encoding "gzip";
    
    # un-gzip traffic from service.prerender.cloud if the client doesn't support it
    gunzip on;

    proxy_set_header X-Prerender-Token "PUT-TOKEN-HERE";

    # API options (HTTP headers)
    # proxy_set_header "Prerender-Disable-Ajax-Preload" "false";
    # proxy_set_header "Prerender-Disable-Ajax-Bypass" "true";
    # proxy_set_header "Prerender-Remove-Script-Tags" "true";
    # proxy_set_header "Prerender-Remove-Trailing-Slash" "true";
    # proxy_set_header "Prerender-Follow-Redirects" "true";

    proxy_cache prerendercloud_cache;

    # NOTE : cache for 5 min in prod
    #this caches prerendercloud results for 5m
    proxy_cache_valid 200 5m;

    # don't let rate limiting or server errors interrupt a request
    proxy_intercept_errors on;
    #error_page 429 500 502 503 504 =200 /index.html;

    # this serves stale while waiting on a request to service.prerender.cloud to update cache (after 1st req)
    proxy_cache_use_stale updating;

    set $prerender 0;

    # RECOMMENDED DEFAULT CONFIG
    # only prerender if the path does not have an extension or does have an html extension
    if ($uri ~ "^(([^.]|\.html?)+)$") {
      set $prerender "EXTENSION";
    }

    # THESE TWO OPTIONS BELOW ARE MUTUALLY EXCLUSIVE

    # ALL USER-AGENTS (RECOMMENDED)
    # (comment this out if using the "bots only section")
    # set $prerender "${prerender}-USER_AGENT";

    # "BOTS ONLY" USER-AGENTS (NOT RECOMMENDED)
    # (comment this out if using the "all user-agents")
    if ($http_user_agent ~* "googlebot|yahoo|bingbot|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator|redditbot|Applebot|WhatsApp|flipboard|tumblr|bitlybot") {
      set $prerender "${prerender}-USER_AGENT";
    }

    # don't prerender AJAX requests (optimization to avoid routing XHR/AJAX through service.prerender.cloud)
    if ($http_x_prerendered ~ true) {
      set $prerender 0;
    }

    # don't prerender if the prerender user agent is retrieving the page
    if ($http_user_agent ~ "prerendercloud") {
      set $prerender 0;
    }

    # don't prerender AJAX requests
    if ($http_x_prerendered ~ true) {
      set $prerender 0;
    }

    proxy_cache_key "$prerender$host$uri";

    if ($prerender = "EXTENSION-USER_AGENT") {
      rewrite .* /$scheme://$host$request_uri? break;
      proxy_pass http://$prerendercloud$uri;
      break;
    }

    }

  }
